name: Ubuntu TON build (shared, x86-64)

on: [push,workflow_dispatch,workflow_call]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:      
        submodules: 'recursive'

    - name: Install system libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git cmake ninja-build zlib1g-dev libsecp256k1-dev libmicrohttpd-dev libsodium-dev liblz4-dev libjemalloc-dev

    - if: matrix.os != 'ubuntu-24.04'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 16 all

    - name: Cache OpenSSL
      id: cache-openssl
      uses: actions/cache@v4
      with:
        path: openssl_3
        key: ${{ runner.os }}-${{ runner.arch }}-openssl_3

    - name: Clone and compile OpenSSL 3.1.4
      if: steps.cache-openssl_3.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/openssl/openssl openssl_3
        cd openssl_3
        opensslPath=`pwd`
        git checkout openssl-3.1.4
        ./config
        make build_libs -j12

    - name: Configure TON
      run: |
        git submodule sync --recursive
        git submodule update
        opensslPath=`pwd`/openssl_3
        mkdir build
        cd build
        cmake -GNinja -DTON_USE_JEMALLOC=ON .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DOPENSSL_ROOT_DIR=$opensslPath \
        -DOPENSSL_INCLUDE_DIR=$opensslPath/include \
        -DOPENSSL_CRYPTO_LIBRARY=$opensslPath/libcrypto.so

    - name: Compile TON
      run: |
        cd build
        ninja storage-daemon storage-daemon-cli fift func tolk tonlib tonlibjson tonlib-cli \
        validator-engine lite-client pow-miner validator-engine-console blockchain-explorer \
        generate-random-id json2tlo dht-server http-proxy rldp-http-proxy \
        adnl-proxy create-state emulator test-ed25519 test-ed25519-crypto test-bigint \
        test-vm test-fift test-cells test-smartcont test-net test-tdactor test-tdutils \
        test-tonlib-offline test-adnl test-dht test-rldp test-rldp2 test-catchain \
        test-fec test-tddb test-db test-validator-session-state test-emulator proxy-liteserver

    - name: Output artifacts
      run: |
        rm -rf artifacts
        mkdir artifacts
        mv build/tonlib/libtonlibjson.so.0.5 build/tonlib/libtonlibjson.so
        cp build/storage/storage-daemon/storage-daemon build/storage/storage-daemon/storage-daemon-cli \
        build/crypto/fift build/crypto/tlbc build/crypto/func build/tolk/tolk build/crypto/create-state build/blockchain-explorer/blockchain-explorer \
        build/validator-engine-console/validator-engine-console build/tonlib/tonlib-cli build/utils/proxy-liteserver \
        build/tonlib/libtonlibjson.so build/http/http-proxy build/rldp-http-proxy/rldp-http-proxy \
        build/dht-server/dht-server build/lite-client/lite-client build/validator-engine/validator-engine \
        build/utils/generate-random-id build/utils/json2tlo build/adnl/adnl-proxy build/emulator/libemulator.so \
        artifacts
        test $? -eq 0 || { echo "Can't copy final binaries"; exit 1; }
        cp -R crypto/smartcont artifacts
        cp -R crypto/fift/lib artifacts
        chmod -R +x artifacts/*

    - name: Upload artifacts
      uses: actions/upload-artifact@master
      with:
        name: ton-binaries-${{ matrix.os }}
        path: artifacts
